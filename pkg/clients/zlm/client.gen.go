// Package zlm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package zlm

import (
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// AddFFmpegSourceParams defines parameters for AddFFmpegSource.
type AddFFmpegSourceParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// SrcUrl FFmpeg拉流地址,支持任意协议或格式(只要FFmpeg支持即可)
	SrcUrl *string `form:"src_url,omitempty" json:"src_url,omitempty"`

	// DstUrl FFmpeg rtmp推流地址，一般都是推给自己，例如rtmp://127.0.0.1/live/stream_form_ffmpeg
	DstUrl *string `form:"dst_url,omitempty" json:"dst_url,omitempty"`

	// TimeoutMs FFmpeg推流成功超时时间,单位毫秒
	TimeoutMs *int `form:"timeout_ms,omitempty" json:"timeout_ms,omitempty"`

	// EnableHls 是否开启hls录制
	EnableHls *int `form:"enable_hls,omitempty" json:"enable_hls,omitempty"`

	// EnableMp4 是否开启mp4录制
	EnableMp4 *int `form:"enable_mp4,omitempty" json:"enable_mp4,omitempty"`
}

// AddStreamProxyParams defines parameters for AddStreamProxy.
type AddStreamProxyParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Vhost 添加的流的虚拟主机，例如__defaultVhost__
	Vhost *string `form:"vhost,omitempty" json:"vhost,omitempty"`

	// App 添加的流的应用名，例如live
	App *string `form:"app,omitempty" json:"app,omitempty"`

	// Stream 添加的流的id名，例如test
	Stream *string `form:"stream,omitempty" json:"stream,omitempty"`

	// Url 拉流地址，例如rtmp://live.hkstv.hk.lxdns.com/live/hks2
	Url *string `form:"url,omitempty" json:"url,omitempty"`
}

// AddStreamPusherProxyParams defines parameters for AddStreamPusherProxy.
type AddStreamPusherProxyParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Schema 推流协议，支持rtsp、rtmp，大小写敏感
	Schema *string `form:"schema,omitempty" json:"schema,omitempty"`

	// Vhost 已注册流的虚拟主机，一般为__defaultVhost__
	Vhost *string `form:"vhost,omitempty" json:"vhost,omitempty"`

	// App 已注册流的应用名，例如live
	App *string `form:"app,omitempty" json:"app,omitempty"`

	// Stream 已注册流的id名，例如test
	Stream *string `form:"stream,omitempty" json:"stream,omitempty"`

	// DstUrl 推流地址，需要与schema字段协议一致
	DstUrl *string `form:"dst_url,omitempty" json:"dst_url,omitempty"`
}

// BroadcastMessageParams defines parameters for BroadcastMessage.
type BroadcastMessageParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Schema 协议，例如 rtsp或rtmp，目前仅支持rtsp协议
	Schema *string `form:"schema,omitempty" json:"schema,omitempty"`

	// Vhost 虚拟主机，例如__defaultVhost__
	Vhost *string `form:"vhost,omitempty" json:"vhost,omitempty"`

	// App 应用名，例如 live
	App *string `form:"app,omitempty" json:"app,omitempty"`

	// Stream 流id，例如 test
	Stream *string `form:"stream,omitempty" json:"stream,omitempty"`
	Msg    *string `form:"msg,omitempty" json:"msg,omitempty"`
}

// CloseRtpServerParams defines parameters for CloseRtpServer.
type CloseRtpServerParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// StreamId 该端口绑定的流id
	StreamId *string `form:"stream_id,omitempty" json:"stream_id,omitempty"`
}

// CloseStreamParams defines parameters for CloseStream.
type CloseStreamParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Schema 协议，例如 rtsp或rtmp
	Schema *string `form:"schema,omitempty" json:"schema,omitempty"`

	// Vhost 虚拟主机，例如__defaultVhost__
	Vhost *string `form:"vhost,omitempty" json:"vhost,omitempty"`

	// App 应用名，例如 live
	App *string `form:"app,omitempty" json:"app,omitempty"`

	// Stream 流id，例如 test
	Stream *string `form:"stream,omitempty" json:"stream,omitempty"`
}

// CloseStreamsParams defines parameters for CloseStreams.
type CloseStreamsParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Schema 协议，例如 rtsp或rtmp
	Schema *string `form:"schema,omitempty" json:"schema,omitempty"`

	// Vhost 虚拟主机，例如__defaultVhost__
	Vhost *string `form:"vhost,omitempty" json:"vhost,omitempty"`

	// App 应用名，例如 live
	App *string `form:"app,omitempty" json:"app,omitempty"`

	// Stream 流id，例如 test
	Stream *string `form:"stream,omitempty" json:"stream,omitempty"`
}

// ConnectRtpServerParams defines parameters for ConnectRtpServer.
type ConnectRtpServerParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// DstUrl tcp主动模式时服务端地址
	DstUrl *int `form:"dst_url,omitempty" json:"dst_url,omitempty"`

	// DstPort tcp主动模式时服务端端口
	DstPort *int `form:"dst_port,omitempty" json:"dst_port,omitempty"`

	// StreamId OpenRtpServer时绑定的流id
	StreamId *string `form:"stream_id,omitempty" json:"stream_id,omitempty"`
}

// DelFFmpegSourceParams defines parameters for DelFFmpegSource.
type DelFFmpegSourceParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`
	Key    *string `form:"key,omitempty" json:"key,omitempty"`
}

// DelStreamProxyParams defines parameters for DelStreamProxy.
type DelStreamProxyParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Key addStreamProxy接口返回的key
	Key *string `form:"key,omitempty" json:"key,omitempty"`
}

// DelStreamPusherProxyParams defines parameters for DelStreamPusherProxy.
type DelStreamPusherProxyParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Key addStreamPusherProxy接口返回的key
	Key *string `form:"key,omitempty" json:"key,omitempty"`
}

// DeleteRecordDirectoryParams defines parameters for DeleteRecordDirectory.
type DeleteRecordDirectoryParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Vhost 虚拟主机，例如__defaultVhost__
	Vhost *string `form:"vhost,omitempty" json:"vhost,omitempty"`

	// App 应用名，例如 live
	App *string `form:"app,omitempty" json:"app,omitempty"`

	// Stream 流id，例如 test
	Stream *string `form:"stream,omitempty" json:"stream,omitempty"`

	// Period 流的录像日期，格式为2020-01-01,如果不是完整的日期，那么会删除失败
	Period *string `form:"period,omitempty" json:"period,omitempty"`
}

// GetAllSessionParams defines parameters for GetAllSession.
type GetAllSessionParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`
}

// GetApiListParams defines parameters for GetApiList.
type GetApiListParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`
}

// GetMediaInfoParams defines parameters for GetMediaInfo.
type GetMediaInfoParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Schema 协议，例如 rtsp或rtmp
	Schema *string `form:"schema,omitempty" json:"schema,omitempty"`

	// Vhost 虚拟主机，例如__defaultVhost__
	Vhost *string `form:"vhost,omitempty" json:"vhost,omitempty"`

	// App 应用名，例如 live
	App *string `form:"app,omitempty" json:"app,omitempty"`

	// Stream 流id，例如 test
	Stream *string `form:"stream,omitempty" json:"stream,omitempty"`
}

// GetMediaListParams defines parameters for GetMediaList.
type GetMediaListParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`
}

// GetMediaPlayerListParams defines parameters for GetMediaPlayerList.
type GetMediaPlayerListParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Schema 协议，例如 rtsp或rtmp
	Schema *string `form:"schema,omitempty" json:"schema,omitempty"`

	// Vhost 虚拟主机，例如__defaultVhost__
	Vhost *string `form:"vhost,omitempty" json:"vhost,omitempty"`

	// App 应用名，例如 live
	App *string `form:"app,omitempty" json:"app,omitempty"`

	// Stream 流id，例如 test
	Stream *string `form:"stream,omitempty" json:"stream,omitempty"`
}

// GetMp4RecordFileParams defines parameters for GetMp4RecordFile.
type GetMp4RecordFileParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Vhost 虚拟主机，例如__defaultVhost__
	Vhost *string `form:"vhost,omitempty" json:"vhost,omitempty"`

	// App 应用名，例如 live
	App *string `form:"app,omitempty" json:"app,omitempty"`

	// Stream 流id，例如 test
	Stream *string `form:"stream,omitempty" json:"stream,omitempty"`

	// CustomizedPath 录像文件保存自定义根目录，为空则采用配置文件设置
	CustomizedPath *string `form:"customized_path,omitempty" json:"customized_path,omitempty"`

	// Period 流的录像日期，格式为2020-02-01,如果不是完整的日期，那么是搜索录像文件夹列表，否则搜索对应日期下的mp4文件列表
	Period *string `form:"period,omitempty" json:"period,omitempty"`
}

// GetProxyInfoParams defines parameters for GetProxyInfo.
type GetProxyInfoParams struct {
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`
	Key    *string `form:"key,omitempty" json:"key,omitempty"`
}

// GetProxyPusherInfoParams defines parameters for GetProxyPusherInfo.
type GetProxyPusherInfoParams struct {
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`
	Key    *string `form:"key,omitempty" json:"key,omitempty"`
}

// GetRtpInfoParams defines parameters for GetRtpInfo.
type GetRtpInfoParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// StreamId 流id
	StreamId *string `form:"stream_id,omitempty" json:"stream_id,omitempty"`
}

// GetServerConfigParams defines parameters for GetServerConfig.
type GetServerConfigParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`
}

// GetSnapParams defines parameters for GetSnap.
type GetSnapParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Url 需要截图的url，可以是本机的，也可以是远程主机的
	Url *string `form:"url,omitempty" json:"url,omitempty"`

	// TimeoutSec 截图失败超时时间，防止FFmpeg一直等待截图
	TimeoutSec *int `form:"timeout_sec,omitempty" json:"timeout_sec,omitempty"`

	// ExpireSec 截图的过期时间，该时间内产生的截图都会作为缓存返回
	ExpireSec *int `form:"expire_sec,omitempty" json:"expire_sec,omitempty"`
}

// GetStatisticParams defines parameters for GetStatistic.
type GetStatisticParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`
}

// GetThreadsLoadParams defines parameters for GetThreadsLoad.
type GetThreadsLoadParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`
}

// GetWorkThreadsLoadParams defines parameters for GetWorkThreadsLoad.
type GetWorkThreadsLoadParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`
}

// IsMediaOnlineParams defines parameters for IsMediaOnline.
type IsMediaOnlineParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Schema 协议，例如 rtsp或rtmp
	Schema *string `form:"schema,omitempty" json:"schema,omitempty"`

	// Vhost 虚拟主机，例如__defaultVhost__
	Vhost *string `form:"vhost,omitempty" json:"vhost,omitempty"`

	// App 应用名，例如 live
	App *string `form:"app,omitempty" json:"app,omitempty"`

	// Stream 流id，例如 test
	Stream *string `form:"stream,omitempty" json:"stream,omitempty"`
}

// IsRecordingParams defines parameters for IsRecording.
type IsRecordingParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Type 0为hls，1为mp4
	Type *int `form:"type,omitempty" json:"type,omitempty"`

	// Vhost 虚拟主机，例如__defaultVhost__
	Vhost *string `form:"vhost,omitempty" json:"vhost,omitempty"`

	// App 应用名，例如 live
	App *string `form:"app,omitempty" json:"app,omitempty"`

	// Stream 流id，例如 obs
	Stream *string `form:"stream,omitempty" json:"stream,omitempty"`
}

// KickSessionParams defines parameters for KickSession.
type KickSessionParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Id 客户端唯一id，可以通过getAllSession接口获取
	Id *int `form:"id,omitempty" json:"id,omitempty"`
}

// KickSessionsParams defines parameters for KickSessions.
type KickSessionsParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`
}

// ListRtpServerParams defines parameters for ListRtpServer.
type ListRtpServerParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`
}

// LoadMP4FileParams defines parameters for LoadMP4File.
type LoadMP4FileParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Vhost 添加的流的虚拟主机，例如__defaultVhost__
	Vhost *string `form:"vhost,omitempty" json:"vhost,omitempty"`

	// App 添加的流的应用名，例如live
	App *string `form:"app,omitempty" json:"app,omitempty"`

	// Stream 添加的流的id名，例如test
	Stream *string `form:"stream,omitempty" json:"stream,omitempty"`

	// FilePath mp4文件绝对路径
	FilePath *string `form:"file_path,omitempty" json:"file_path,omitempty"`
}

// OpenRtpServerParams defines parameters for OpenRtpServer.
type OpenRtpServerParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Port 绑定的端口，0时为随机端口
	Port *int `form:"port,omitempty" json:"port,omitempty"`

	// TcpMode tcp模式，0时为不启用tcp监听，1时为启用tcp监听
	TcpMode *int `form:"tcp_mode,omitempty" json:"tcp_mode,omitempty"`

	// StreamId 该端口绑定的流id
	StreamId *string `form:"stream_id,omitempty" json:"stream_id,omitempty"`
}

// PauseRtpCheckParams defines parameters for PauseRtpCheck.
type PauseRtpCheckParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// StreamId 该端口绑定的流id
	StreamId *string `form:"stream_id,omitempty" json:"stream_id,omitempty"`
}

// RestartServerParams defines parameters for RestartServer.
type RestartServerParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`
}

// ResumeRtpCheckParams defines parameters for ResumeRtpCheck.
type ResumeRtpCheckParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// StreamId 该端口绑定的流id
	StreamId *string `form:"stream_id,omitempty" json:"stream_id,omitempty"`
}

// SeekRecordStampParams defines parameters for SeekRecordStamp.
type SeekRecordStampParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Vhost 虚拟主机，例如__defaultVhost__
	Vhost *string `form:"vhost,omitempty" json:"vhost,omitempty"`

	// App 应用名，例如 live
	App *string `form:"app,omitempty" json:"app,omitempty"`

	// Stream 流id，例如 obs
	Stream *string `form:"stream,omitempty" json:"stream,omitempty"`

	// Stamp 要设置的录像播放位置
	Stamp *int `form:"stamp,omitempty" json:"stamp,omitempty"`
}

// SetRecordSpeedParams defines parameters for SetRecordSpeed.
type SetRecordSpeedParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Vhost 虚拟主机，例如__defaultVhost__
	Vhost *string `form:"vhost,omitempty" json:"vhost,omitempty"`

	// App 应用名，例如 live
	App *string `form:"app,omitempty" json:"app,omitempty"`

	// Stream 流id，例如 obs
	Stream *string `form:"stream,omitempty" json:"stream,omitempty"`

	// Speed 要设置的录像倍速
	Speed *float32 `form:"speed,omitempty" json:"speed,omitempty"`
}

// SetServerConfigParams defines parameters for SetServerConfig.
type SetServerConfigParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// ApiApiDebug 配置键与配置项值
	ApiApiDebug *int `form:"api.apiDebug,omitempty" json:"api.apiDebug,omitempty"`
}

// StartRecordParams defines parameters for StartRecord.
type StartRecordParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Type 0为hls，1为mp4
	Type *int `form:"type,omitempty" json:"type,omitempty"`

	// Vhost 虚拟主机，例如__defaultVhost__
	Vhost *string `form:"vhost,omitempty" json:"vhost,omitempty"`

	// App 应用名，例如 live
	App *string `form:"app,omitempty" json:"app,omitempty"`

	// Stream 流id，例如 obs
	Stream *string `form:"stream,omitempty" json:"stream,omitempty"`
}

// StartSendRtpParams defines parameters for StartSendRtp.
type StartSendRtpParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Vhost 虚拟主机，例如__defaultVhost__
	Vhost *string `form:"vhost,omitempty" json:"vhost,omitempty"`

	// App 应用名，例如 live
	App *string `form:"app,omitempty" json:"app,omitempty"`

	// Stream 流id，例如 obs
	Stream *string `form:"stream,omitempty" json:"stream,omitempty"`

	// Ssrc rtp推流的ssrc
	Ssrc *int `form:"ssrc,omitempty" json:"ssrc,omitempty"`

	// DstUrl 目标ip或域名
	DstUrl *string `form:"dst_url,omitempty" json:"dst_url,omitempty"`

	// DstPort 目标端口
	DstPort *int `form:"dst_port,omitempty" json:"dst_port,omitempty"`

	// IsUdp 是否为udp模式,否则为tcp模式
	IsUdp *int `form:"is_udp,omitempty" json:"is_udp,omitempty"`
}

// StartSendRtpPassiveParams defines parameters for StartSendRtpPassive.
type StartSendRtpPassiveParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Vhost 虚拟主机，例如__defaultVhost__
	Vhost *string `form:"vhost,omitempty" json:"vhost,omitempty"`

	// App 应用名，例如 live
	App *string `form:"app,omitempty" json:"app,omitempty"`

	// Stream 流id，例如 obs
	Stream *string `form:"stream,omitempty" json:"stream,omitempty"`

	// Ssrc rtp推流的ssrc，ssrc不同时，可以推流到多个上级服务器
	Ssrc *int `form:"ssrc,omitempty" json:"ssrc,omitempty"`
}

// StopRecordParams defines parameters for StopRecord.
type StopRecordParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Type 0为hls，1为mp4
	Type *int `form:"type,omitempty" json:"type,omitempty"`

	// Vhost 虚拟主机，例如__defaultVhost__
	Vhost *string `form:"vhost,omitempty" json:"vhost,omitempty"`

	// App 应用名，例如 live
	App *string `form:"app,omitempty" json:"app,omitempty"`

	// Stream 流id，例如 obs
	Stream *string `form:"stream,omitempty" json:"stream,omitempty"`
}

// StopSendRtpParams defines parameters for StopSendRtp.
type StopSendRtpParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// Vhost 虚拟主机，例如__defaultVhost__
	Vhost *string `form:"vhost,omitempty" json:"vhost,omitempty"`

	// App 应用名，例如 live
	App *string `form:"app,omitempty" json:"app,omitempty"`

	// Stream 流id，例如 obs
	Stream *string `form:"stream,omitempty" json:"stream,omitempty"`
}

// UpdateRtpServerSSRCParams defines parameters for UpdateRtpServerSSRC.
type UpdateRtpServerSSRCParams struct {
	// Secret api操作密钥(配置文件配置)
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`

	// StreamId 该端口绑定的流id
	StreamId *string `form:"stream_id,omitempty" json:"stream_id,omitempty"`

	// Ssrc 十进制ssrc
	Ssrc *int `form:"ssrc,omitempty" json:"ssrc,omitempty"`
}

// VersionParams defines parameters for Version.
type VersionParams struct {
	Secret *string `form:"secret,omitempty" json:"secret,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AddFFmpegSource request
	AddFFmpegSource(ctx context.Context, params *AddFFmpegSourceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddStreamProxy request
	AddStreamProxy(ctx context.Context, params *AddStreamProxyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddStreamPusherProxy request
	AddStreamPusherProxy(ctx context.Context, params *AddStreamPusherProxyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BroadcastMessage request
	BroadcastMessage(ctx context.Context, params *BroadcastMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CloseRtpServer request
	CloseRtpServer(ctx context.Context, params *CloseRtpServerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CloseStream request
	CloseStream(ctx context.Context, params *CloseStreamParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CloseStreams request
	CloseStreams(ctx context.Context, params *CloseStreamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConnectRtpServer request
	ConnectRtpServer(ctx context.Context, params *ConnectRtpServerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DelFFmpegSource request
	DelFFmpegSource(ctx context.Context, params *DelFFmpegSourceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DelStreamProxy request
	DelStreamProxy(ctx context.Context, params *DelStreamProxyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DelStreamPusherProxy request
	DelStreamPusherProxy(ctx context.Context, params *DelStreamPusherProxyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRecordDirectory request
	DeleteRecordDirectory(ctx context.Context, params *DeleteRecordDirectoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllSession request
	GetAllSession(ctx context.Context, params *GetAllSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiList request
	GetApiList(ctx context.Context, params *GetApiListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMediaInfo request
	GetMediaInfo(ctx context.Context, params *GetMediaInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMediaList request
	GetMediaList(ctx context.Context, params *GetMediaListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMediaPlayerList request
	GetMediaPlayerList(ctx context.Context, params *GetMediaPlayerListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMp4RecordFile request
	GetMp4RecordFile(ctx context.Context, params *GetMp4RecordFileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProxyInfo request
	GetProxyInfo(ctx context.Context, params *GetProxyInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProxyPusherInfo request
	GetProxyPusherInfo(ctx context.Context, params *GetProxyPusherInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRtpInfo request
	GetRtpInfo(ctx context.Context, params *GetRtpInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerConfig request
	GetServerConfig(ctx context.Context, params *GetServerConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnap request
	GetSnap(ctx context.Context, params *GetSnapParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatistic request
	GetStatistic(ctx context.Context, params *GetStatisticParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetThreadsLoad request
	GetThreadsLoad(ctx context.Context, params *GetThreadsLoadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkThreadsLoad request
	GetWorkThreadsLoad(ctx context.Context, params *GetWorkThreadsLoadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IsMediaOnline request
	IsMediaOnline(ctx context.Context, params *IsMediaOnlineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IsRecording request
	IsRecording(ctx context.Context, params *IsRecordingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KickSession request
	KickSession(ctx context.Context, params *KickSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KickSessions request
	KickSessions(ctx context.Context, params *KickSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRtpServer request
	ListRtpServer(ctx context.Context, params *ListRtpServerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoadMP4File request
	LoadMP4File(ctx context.Context, params *LoadMP4FileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OpenRtpServer request
	OpenRtpServer(ctx context.Context, params *OpenRtpServerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PauseRtpCheck request
	PauseRtpCheck(ctx context.Context, params *PauseRtpCheckParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RestartServer request
	RestartServer(ctx context.Context, params *RestartServerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResumeRtpCheck request
	ResumeRtpCheck(ctx context.Context, params *ResumeRtpCheckParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeekRecordStamp request
	SeekRecordStamp(ctx context.Context, params *SeekRecordStampParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetRecordSpeed request
	SetRecordSpeed(ctx context.Context, params *SetRecordSpeedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetServerConfig request
	SetServerConfig(ctx context.Context, params *SetServerConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartRecord request
	StartRecord(ctx context.Context, params *StartRecordParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartSendRtp request
	StartSendRtp(ctx context.Context, params *StartSendRtpParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartSendRtpPassive request
	StartSendRtpPassive(ctx context.Context, params *StartSendRtpPassiveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopRecord request
	StopRecord(ctx context.Context, params *StopRecordParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopSendRtp request
	StopSendRtp(ctx context.Context, params *StopSendRtpParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRtpServerSSRC request
	UpdateRtpServerSSRC(ctx context.Context, params *UpdateRtpServerSSRCParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Version request
	Version(ctx context.Context, params *VersionParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AddFFmpegSource(ctx context.Context, params *AddFFmpegSourceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddFFmpegSourceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddStreamProxy(ctx context.Context, params *AddStreamProxyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddStreamProxyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddStreamPusherProxy(ctx context.Context, params *AddStreamPusherProxyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddStreamPusherProxyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BroadcastMessage(ctx context.Context, params *BroadcastMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBroadcastMessageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CloseRtpServer(ctx context.Context, params *CloseRtpServerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloseRtpServerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CloseStream(ctx context.Context, params *CloseStreamParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloseStreamRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CloseStreams(ctx context.Context, params *CloseStreamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloseStreamsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConnectRtpServer(ctx context.Context, params *ConnectRtpServerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConnectRtpServerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DelFFmpegSource(ctx context.Context, params *DelFFmpegSourceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelFFmpegSourceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DelStreamProxy(ctx context.Context, params *DelStreamProxyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelStreamProxyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DelStreamPusherProxy(ctx context.Context, params *DelStreamPusherProxyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelStreamPusherProxyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRecordDirectory(ctx context.Context, params *DeleteRecordDirectoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRecordDirectoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllSession(ctx context.Context, params *GetAllSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllSessionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiList(ctx context.Context, params *GetApiListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMediaInfo(ctx context.Context, params *GetMediaInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMediaInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMediaList(ctx context.Context, params *GetMediaListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMediaListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMediaPlayerList(ctx context.Context, params *GetMediaPlayerListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMediaPlayerListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMp4RecordFile(ctx context.Context, params *GetMp4RecordFileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMp4RecordFileRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProxyInfo(ctx context.Context, params *GetProxyInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProxyInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProxyPusherInfo(ctx context.Context, params *GetProxyPusherInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProxyPusherInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRtpInfo(ctx context.Context, params *GetRtpInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRtpInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerConfig(ctx context.Context, params *GetServerConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerConfigRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnap(ctx context.Context, params *GetSnapParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnapRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatistic(ctx context.Context, params *GetStatisticParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatisticRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetThreadsLoad(ctx context.Context, params *GetThreadsLoadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetThreadsLoadRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkThreadsLoad(ctx context.Context, params *GetWorkThreadsLoadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkThreadsLoadRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IsMediaOnline(ctx context.Context, params *IsMediaOnlineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIsMediaOnlineRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IsRecording(ctx context.Context, params *IsRecordingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIsRecordingRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KickSession(ctx context.Context, params *KickSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKickSessionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KickSessions(ctx context.Context, params *KickSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKickSessionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRtpServer(ctx context.Context, params *ListRtpServerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRtpServerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoadMP4File(ctx context.Context, params *LoadMP4FileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoadMP4FileRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OpenRtpServer(ctx context.Context, params *OpenRtpServerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOpenRtpServerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PauseRtpCheck(ctx context.Context, params *PauseRtpCheckParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPauseRtpCheckRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestartServer(ctx context.Context, params *RestartServerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestartServerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResumeRtpCheck(ctx context.Context, params *ResumeRtpCheckParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResumeRtpCheckRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeekRecordStamp(ctx context.Context, params *SeekRecordStampParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeekRecordStampRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetRecordSpeed(ctx context.Context, params *SetRecordSpeedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetRecordSpeedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetServerConfig(ctx context.Context, params *SetServerConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetServerConfigRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartRecord(ctx context.Context, params *StartRecordParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartRecordRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartSendRtp(ctx context.Context, params *StartSendRtpParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartSendRtpRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartSendRtpPassive(ctx context.Context, params *StartSendRtpPassiveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartSendRtpPassiveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopRecord(ctx context.Context, params *StopRecordParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopRecordRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopSendRtp(ctx context.Context, params *StopSendRtpParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopSendRtpRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRtpServerSSRC(ctx context.Context, params *UpdateRtpServerSSRCParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRtpServerSSRCRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Version(ctx context.Context, params *VersionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVersionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAddFFmpegSourceRequest generates requests for AddFFmpegSource
func NewAddFFmpegSourceRequest(server string, params *AddFFmpegSourceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/addFFmpegSource")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SrcUrl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "src_url", runtime.ParamLocationQuery, *params.SrcUrl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DstUrl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dst_url", runtime.ParamLocationQuery, *params.DstUrl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimeoutMs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timeout_ms", runtime.ParamLocationQuery, *params.TimeoutMs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EnableHls != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enable_hls", runtime.ParamLocationQuery, *params.EnableHls); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EnableMp4 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enable_mp4", runtime.ParamLocationQuery, *params.EnableMp4); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddStreamProxyRequest generates requests for AddStreamProxy
func NewAddStreamProxyRequest(server string, params *AddStreamProxyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/addStreamProxy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Vhost != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vhost", runtime.ParamLocationQuery, *params.Vhost); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.App != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stream != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream", runtime.ParamLocationQuery, *params.Stream); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddStreamPusherProxyRequest generates requests for AddStreamPusherProxy
func NewAddStreamPusherProxyRequest(server string, params *AddStreamPusherProxyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/addStreamPusherProxy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Schema != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "schema", runtime.ParamLocationQuery, *params.Schema); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Vhost != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vhost", runtime.ParamLocationQuery, *params.Vhost); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.App != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stream != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream", runtime.ParamLocationQuery, *params.Stream); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DstUrl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dst_url", runtime.ParamLocationQuery, *params.DstUrl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBroadcastMessageRequest generates requests for BroadcastMessage
func NewBroadcastMessageRequest(server string, params *BroadcastMessageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/broadcastMessage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Schema != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "schema", runtime.ParamLocationQuery, *params.Schema); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Vhost != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vhost", runtime.ParamLocationQuery, *params.Vhost); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.App != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stream != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream", runtime.ParamLocationQuery, *params.Stream); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Msg != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "msg", runtime.ParamLocationQuery, *params.Msg); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCloseRtpServerRequest generates requests for CloseRtpServer
func NewCloseRtpServerRequest(server string, params *CloseRtpServerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/closeRtpServer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_id", runtime.ParamLocationQuery, *params.StreamId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCloseStreamRequest generates requests for CloseStream
func NewCloseStreamRequest(server string, params *CloseStreamParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/close_stream")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Schema != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "schema", runtime.ParamLocationQuery, *params.Schema); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Vhost != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vhost", runtime.ParamLocationQuery, *params.Vhost); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.App != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stream != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream", runtime.ParamLocationQuery, *params.Stream); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCloseStreamsRequest generates requests for CloseStreams
func NewCloseStreamsRequest(server string, params *CloseStreamsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/close_streams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Schema != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "schema", runtime.ParamLocationQuery, *params.Schema); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Vhost != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vhost", runtime.ParamLocationQuery, *params.Vhost); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.App != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stream != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream", runtime.ParamLocationQuery, *params.Stream); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConnectRtpServerRequest generates requests for ConnectRtpServer
func NewConnectRtpServerRequest(server string, params *ConnectRtpServerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/connectRtpServer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DstUrl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dst_url", runtime.ParamLocationQuery, *params.DstUrl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DstPort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dst_port", runtime.ParamLocationQuery, *params.DstPort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_id", runtime.ParamLocationQuery, *params.StreamId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDelFFmpegSourceRequest generates requests for DelFFmpegSource
func NewDelFFmpegSourceRequest(server string, params *DelFFmpegSourceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/delFFmpegSource")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDelStreamProxyRequest generates requests for DelStreamProxy
func NewDelStreamProxyRequest(server string, params *DelStreamProxyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/delStreamProxy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDelStreamPusherProxyRequest generates requests for DelStreamPusherProxy
func NewDelStreamPusherProxyRequest(server string, params *DelStreamPusherProxyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/delStreamPusherProxy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRecordDirectoryRequest generates requests for DeleteRecordDirectory
func NewDeleteRecordDirectoryRequest(server string, params *DeleteRecordDirectoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/deleteRecordDirectory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Vhost != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vhost", runtime.ParamLocationQuery, *params.Vhost); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.App != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stream != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream", runtime.ParamLocationQuery, *params.Stream); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllSessionRequest generates requests for GetAllSession
func NewGetAllSessionRequest(server string, params *GetAllSessionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/getAllSession")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiListRequest generates requests for GetApiList
func NewGetApiListRequest(server string, params *GetApiListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/getApiList")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMediaInfoRequest generates requests for GetMediaInfo
func NewGetMediaInfoRequest(server string, params *GetMediaInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/getMediaInfo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Schema != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "schema", runtime.ParamLocationQuery, *params.Schema); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Vhost != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vhost", runtime.ParamLocationQuery, *params.Vhost); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.App != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stream != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream", runtime.ParamLocationQuery, *params.Stream); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMediaListRequest generates requests for GetMediaList
func NewGetMediaListRequest(server string, params *GetMediaListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/getMediaList")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMediaPlayerListRequest generates requests for GetMediaPlayerList
func NewGetMediaPlayerListRequest(server string, params *GetMediaPlayerListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/getMediaPlayerList")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Schema != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "schema", runtime.ParamLocationQuery, *params.Schema); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Vhost != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vhost", runtime.ParamLocationQuery, *params.Vhost); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.App != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stream != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream", runtime.ParamLocationQuery, *params.Stream); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMp4RecordFileRequest generates requests for GetMp4RecordFile
func NewGetMp4RecordFileRequest(server string, params *GetMp4RecordFileParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/getMp4RecordFile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Vhost != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vhost", runtime.ParamLocationQuery, *params.Vhost); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.App != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stream != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream", runtime.ParamLocationQuery, *params.Stream); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CustomizedPath != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customized_path", runtime.ParamLocationQuery, *params.CustomizedPath); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProxyInfoRequest generates requests for GetProxyInfo
func NewGetProxyInfoRequest(server string, params *GetProxyInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/getProxyInfo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProxyPusherInfoRequest generates requests for GetProxyPusherInfo
func NewGetProxyPusherInfoRequest(server string, params *GetProxyPusherInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/getProxyPusherInfo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRtpInfoRequest generates requests for GetRtpInfo
func NewGetRtpInfoRequest(server string, params *GetRtpInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/getRtpInfo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_id", runtime.ParamLocationQuery, *params.StreamId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServerConfigRequest generates requests for GetServerConfig
func NewGetServerConfigRequest(server string, params *GetServerConfigParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/getServerConfig")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSnapRequest generates requests for GetSnap
func NewGetSnapRequest(server string, params *GetSnapParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/getSnap")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimeoutSec != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timeout_sec", runtime.ParamLocationQuery, *params.TimeoutSec); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExpireSec != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expire_sec", runtime.ParamLocationQuery, *params.ExpireSec); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatisticRequest generates requests for GetStatistic
func NewGetStatisticRequest(server string, params *GetStatisticParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/getStatistic")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetThreadsLoadRequest generates requests for GetThreadsLoad
func NewGetThreadsLoadRequest(server string, params *GetThreadsLoadParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/getThreadsLoad")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkThreadsLoadRequest generates requests for GetWorkThreadsLoad
func NewGetWorkThreadsLoadRequest(server string, params *GetWorkThreadsLoadParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/getWorkThreadsLoad")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIsMediaOnlineRequest generates requests for IsMediaOnline
func NewIsMediaOnlineRequest(server string, params *IsMediaOnlineParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/isMediaOnline")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Schema != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "schema", runtime.ParamLocationQuery, *params.Schema); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Vhost != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vhost", runtime.ParamLocationQuery, *params.Vhost); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.App != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stream != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream", runtime.ParamLocationQuery, *params.Stream); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIsRecordingRequest generates requests for IsRecording
func NewIsRecordingRequest(server string, params *IsRecordingParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/isRecording")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Vhost != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vhost", runtime.ParamLocationQuery, *params.Vhost); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.App != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stream != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream", runtime.ParamLocationQuery, *params.Stream); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKickSessionRequest generates requests for KickSession
func NewKickSessionRequest(server string, params *KickSessionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/kick_session")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKickSessionsRequest generates requests for KickSessions
func NewKickSessionsRequest(server string, params *KickSessionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/kick_sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRtpServerRequest generates requests for ListRtpServer
func NewListRtpServerRequest(server string, params *ListRtpServerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/listRtpServer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLoadMP4FileRequest generates requests for LoadMP4File
func NewLoadMP4FileRequest(server string, params *LoadMP4FileParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/loadMP4File")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Vhost != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vhost", runtime.ParamLocationQuery, *params.Vhost); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.App != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stream != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream", runtime.ParamLocationQuery, *params.Stream); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilePath != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_path", runtime.ParamLocationQuery, *params.FilePath); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOpenRtpServerRequest generates requests for OpenRtpServer
func NewOpenRtpServerRequest(server string, params *OpenRtpServerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/openRtpServer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Port != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "port", runtime.ParamLocationQuery, *params.Port); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TcpMode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tcp_mode", runtime.ParamLocationQuery, *params.TcpMode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_id", runtime.ParamLocationQuery, *params.StreamId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPauseRtpCheckRequest generates requests for PauseRtpCheck
func NewPauseRtpCheckRequest(server string, params *PauseRtpCheckParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/pauseRtpCheck")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_id", runtime.ParamLocationQuery, *params.StreamId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRestartServerRequest generates requests for RestartServer
func NewRestartServerRequest(server string, params *RestartServerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/restartServer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResumeRtpCheckRequest generates requests for ResumeRtpCheck
func NewResumeRtpCheckRequest(server string, params *ResumeRtpCheckParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/resumeRtpCheck")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_id", runtime.ParamLocationQuery, *params.StreamId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeekRecordStampRequest generates requests for SeekRecordStamp
func NewSeekRecordStampRequest(server string, params *SeekRecordStampParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/seekRecordStamp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Vhost != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vhost", runtime.ParamLocationQuery, *params.Vhost); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.App != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stream != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream", runtime.ParamLocationQuery, *params.Stream); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stamp != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stamp", runtime.ParamLocationQuery, *params.Stamp); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetRecordSpeedRequest generates requests for SetRecordSpeed
func NewSetRecordSpeedRequest(server string, params *SetRecordSpeedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/setRecordSpeed")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Vhost != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vhost", runtime.ParamLocationQuery, *params.Vhost); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.App != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stream != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream", runtime.ParamLocationQuery, *params.Stream); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Speed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "speed", runtime.ParamLocationQuery, *params.Speed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetServerConfigRequest generates requests for SetServerConfig
func NewSetServerConfigRequest(server string, params *SetServerConfigParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/setServerConfig")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiApiDebug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api.apiDebug", runtime.ParamLocationQuery, *params.ApiApiDebug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartRecordRequest generates requests for StartRecord
func NewStartRecordRequest(server string, params *StartRecordParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/startRecord")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Vhost != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vhost", runtime.ParamLocationQuery, *params.Vhost); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.App != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stream != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream", runtime.ParamLocationQuery, *params.Stream); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartSendRtpRequest generates requests for StartSendRtp
func NewStartSendRtpRequest(server string, params *StartSendRtpParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/startSendRtp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Vhost != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vhost", runtime.ParamLocationQuery, *params.Vhost); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.App != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stream != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream", runtime.ParamLocationQuery, *params.Stream); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ssrc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ssrc", runtime.ParamLocationQuery, *params.Ssrc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DstUrl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dst_url", runtime.ParamLocationQuery, *params.DstUrl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DstPort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dst_port", runtime.ParamLocationQuery, *params.DstPort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsUdp != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_udp", runtime.ParamLocationQuery, *params.IsUdp); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartSendRtpPassiveRequest generates requests for StartSendRtpPassive
func NewStartSendRtpPassiveRequest(server string, params *StartSendRtpPassiveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/startSendRtpPassive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Vhost != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vhost", runtime.ParamLocationQuery, *params.Vhost); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.App != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stream != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream", runtime.ParamLocationQuery, *params.Stream); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ssrc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ssrc", runtime.ParamLocationQuery, *params.Ssrc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStopRecordRequest generates requests for StopRecord
func NewStopRecordRequest(server string, params *StopRecordParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/stopRecord")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Vhost != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vhost", runtime.ParamLocationQuery, *params.Vhost); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.App != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stream != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream", runtime.ParamLocationQuery, *params.Stream); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStopSendRtpRequest generates requests for StopSendRtp
func NewStopSendRtpRequest(server string, params *StopSendRtpParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/stopSendRtp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Vhost != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vhost", runtime.ParamLocationQuery, *params.Vhost); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.App != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app", runtime.ParamLocationQuery, *params.App); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stream != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream", runtime.ParamLocationQuery, *params.Stream); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRtpServerSSRCRequest generates requests for UpdateRtpServerSSRC
func NewUpdateRtpServerSSRCRequest(server string, params *UpdateRtpServerSSRCParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/updateRtpServerSSRC")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreamId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream_id", runtime.ParamLocationQuery, *params.StreamId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ssrc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ssrc", runtime.ParamLocationQuery, *params.Ssrc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVersionRequest generates requests for Version
func NewVersionRequest(server string, params *VersionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/api/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Secret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret", runtime.ParamLocationQuery, *params.Secret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AddFFmpegSourceWithResponse request
	AddFFmpegSourceWithResponse(ctx context.Context, params *AddFFmpegSourceParams, reqEditors ...RequestEditorFn) (*AddFFmpegSourceResponse, error)

	// AddStreamProxyWithResponse request
	AddStreamProxyWithResponse(ctx context.Context, params *AddStreamProxyParams, reqEditors ...RequestEditorFn) (*AddStreamProxyResponse, error)

	// AddStreamPusherProxyWithResponse request
	AddStreamPusherProxyWithResponse(ctx context.Context, params *AddStreamPusherProxyParams, reqEditors ...RequestEditorFn) (*AddStreamPusherProxyResponse, error)

	// BroadcastMessageWithResponse request
	BroadcastMessageWithResponse(ctx context.Context, params *BroadcastMessageParams, reqEditors ...RequestEditorFn) (*BroadcastMessageResponse, error)

	// CloseRtpServerWithResponse request
	CloseRtpServerWithResponse(ctx context.Context, params *CloseRtpServerParams, reqEditors ...RequestEditorFn) (*CloseRtpServerResponse, error)

	// CloseStreamWithResponse request
	CloseStreamWithResponse(ctx context.Context, params *CloseStreamParams, reqEditors ...RequestEditorFn) (*CloseStreamResponse, error)

	// CloseStreamsWithResponse request
	CloseStreamsWithResponse(ctx context.Context, params *CloseStreamsParams, reqEditors ...RequestEditorFn) (*CloseStreamsResponse, error)

	// ConnectRtpServerWithResponse request
	ConnectRtpServerWithResponse(ctx context.Context, params *ConnectRtpServerParams, reqEditors ...RequestEditorFn) (*ConnectRtpServerResponse, error)

	// DelFFmpegSourceWithResponse request
	DelFFmpegSourceWithResponse(ctx context.Context, params *DelFFmpegSourceParams, reqEditors ...RequestEditorFn) (*DelFFmpegSourceResponse, error)

	// DelStreamProxyWithResponse request
	DelStreamProxyWithResponse(ctx context.Context, params *DelStreamProxyParams, reqEditors ...RequestEditorFn) (*DelStreamProxyResponse, error)

	// DelStreamPusherProxyWithResponse request
	DelStreamPusherProxyWithResponse(ctx context.Context, params *DelStreamPusherProxyParams, reqEditors ...RequestEditorFn) (*DelStreamPusherProxyResponse, error)

	// DeleteRecordDirectoryWithResponse request
	DeleteRecordDirectoryWithResponse(ctx context.Context, params *DeleteRecordDirectoryParams, reqEditors ...RequestEditorFn) (*DeleteRecordDirectoryResponse, error)

	// GetAllSessionWithResponse request
	GetAllSessionWithResponse(ctx context.Context, params *GetAllSessionParams, reqEditors ...RequestEditorFn) (*GetAllSessionResponse, error)

	// GetApiListWithResponse request
	GetApiListWithResponse(ctx context.Context, params *GetApiListParams, reqEditors ...RequestEditorFn) (*GetApiListResponse, error)

	// GetMediaInfoWithResponse request
	GetMediaInfoWithResponse(ctx context.Context, params *GetMediaInfoParams, reqEditors ...RequestEditorFn) (*GetMediaInfoResponse, error)

	// GetMediaListWithResponse request
	GetMediaListWithResponse(ctx context.Context, params *GetMediaListParams, reqEditors ...RequestEditorFn) (*GetMediaListResponse, error)

	// GetMediaPlayerListWithResponse request
	GetMediaPlayerListWithResponse(ctx context.Context, params *GetMediaPlayerListParams, reqEditors ...RequestEditorFn) (*GetMediaPlayerListResponse, error)

	// GetMp4RecordFileWithResponse request
	GetMp4RecordFileWithResponse(ctx context.Context, params *GetMp4RecordFileParams, reqEditors ...RequestEditorFn) (*GetMp4RecordFileResponse, error)

	// GetProxyInfoWithResponse request
	GetProxyInfoWithResponse(ctx context.Context, params *GetProxyInfoParams, reqEditors ...RequestEditorFn) (*GetProxyInfoResponse, error)

	// GetProxyPusherInfoWithResponse request
	GetProxyPusherInfoWithResponse(ctx context.Context, params *GetProxyPusherInfoParams, reqEditors ...RequestEditorFn) (*GetProxyPusherInfoResponse, error)

	// GetRtpInfoWithResponse request
	GetRtpInfoWithResponse(ctx context.Context, params *GetRtpInfoParams, reqEditors ...RequestEditorFn) (*GetRtpInfoResponse, error)

	// GetServerConfigWithResponse request
	GetServerConfigWithResponse(ctx context.Context, params *GetServerConfigParams, reqEditors ...RequestEditorFn) (*GetServerConfigResponse, error)

	// GetSnapWithResponse request
	GetSnapWithResponse(ctx context.Context, params *GetSnapParams, reqEditors ...RequestEditorFn) (*GetSnapResponse, error)

	// GetStatisticWithResponse request
	GetStatisticWithResponse(ctx context.Context, params *GetStatisticParams, reqEditors ...RequestEditorFn) (*GetStatisticResponse, error)

	// GetThreadsLoadWithResponse request
	GetThreadsLoadWithResponse(ctx context.Context, params *GetThreadsLoadParams, reqEditors ...RequestEditorFn) (*GetThreadsLoadResponse, error)

	// GetWorkThreadsLoadWithResponse request
	GetWorkThreadsLoadWithResponse(ctx context.Context, params *GetWorkThreadsLoadParams, reqEditors ...RequestEditorFn) (*GetWorkThreadsLoadResponse, error)

	// IsMediaOnlineWithResponse request
	IsMediaOnlineWithResponse(ctx context.Context, params *IsMediaOnlineParams, reqEditors ...RequestEditorFn) (*IsMediaOnlineResponse, error)

	// IsRecordingWithResponse request
	IsRecordingWithResponse(ctx context.Context, params *IsRecordingParams, reqEditors ...RequestEditorFn) (*IsRecordingResponse, error)

	// KickSessionWithResponse request
	KickSessionWithResponse(ctx context.Context, params *KickSessionParams, reqEditors ...RequestEditorFn) (*KickSessionResponse, error)

	// KickSessionsWithResponse request
	KickSessionsWithResponse(ctx context.Context, params *KickSessionsParams, reqEditors ...RequestEditorFn) (*KickSessionsResponse, error)

	// ListRtpServerWithResponse request
	ListRtpServerWithResponse(ctx context.Context, params *ListRtpServerParams, reqEditors ...RequestEditorFn) (*ListRtpServerResponse, error)

	// LoadMP4FileWithResponse request
	LoadMP4FileWithResponse(ctx context.Context, params *LoadMP4FileParams, reqEditors ...RequestEditorFn) (*LoadMP4FileResponse, error)

	// OpenRtpServerWithResponse request
	OpenRtpServerWithResponse(ctx context.Context, params *OpenRtpServerParams, reqEditors ...RequestEditorFn) (*OpenRtpServerResponse, error)

	// PauseRtpCheckWithResponse request
	PauseRtpCheckWithResponse(ctx context.Context, params *PauseRtpCheckParams, reqEditors ...RequestEditorFn) (*PauseRtpCheckResponse, error)

	// RestartServerWithResponse request
	RestartServerWithResponse(ctx context.Context, params *RestartServerParams, reqEditors ...RequestEditorFn) (*RestartServerResponse, error)

	// ResumeRtpCheckWithResponse request
	ResumeRtpCheckWithResponse(ctx context.Context, params *ResumeRtpCheckParams, reqEditors ...RequestEditorFn) (*ResumeRtpCheckResponse, error)

	// SeekRecordStampWithResponse request
	SeekRecordStampWithResponse(ctx context.Context, params *SeekRecordStampParams, reqEditors ...RequestEditorFn) (*SeekRecordStampResponse, error)

	// SetRecordSpeedWithResponse request
	SetRecordSpeedWithResponse(ctx context.Context, params *SetRecordSpeedParams, reqEditors ...RequestEditorFn) (*SetRecordSpeedResponse, error)

	// SetServerConfigWithResponse request
	SetServerConfigWithResponse(ctx context.Context, params *SetServerConfigParams, reqEditors ...RequestEditorFn) (*SetServerConfigResponse, error)

	// StartRecordWithResponse request
	StartRecordWithResponse(ctx context.Context, params *StartRecordParams, reqEditors ...RequestEditorFn) (*StartRecordResponse, error)

	// StartSendRtpWithResponse request
	StartSendRtpWithResponse(ctx context.Context, params *StartSendRtpParams, reqEditors ...RequestEditorFn) (*StartSendRtpResponse, error)

	// StartSendRtpPassiveWithResponse request
	StartSendRtpPassiveWithResponse(ctx context.Context, params *StartSendRtpPassiveParams, reqEditors ...RequestEditorFn) (*StartSendRtpPassiveResponse, error)

	// StopRecordWithResponse request
	StopRecordWithResponse(ctx context.Context, params *StopRecordParams, reqEditors ...RequestEditorFn) (*StopRecordResponse, error)

	// StopSendRtpWithResponse request
	StopSendRtpWithResponse(ctx context.Context, params *StopSendRtpParams, reqEditors ...RequestEditorFn) (*StopSendRtpResponse, error)

	// UpdateRtpServerSSRCWithResponse request
	UpdateRtpServerSSRCWithResponse(ctx context.Context, params *UpdateRtpServerSSRCParams, reqEditors ...RequestEditorFn) (*UpdateRtpServerSSRCResponse, error)

	// VersionWithResponse request
	VersionWithResponse(ctx context.Context, params *VersionParams, reqEditors ...RequestEditorFn) (*VersionResponse, error)
}

type AddFFmpegSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddFFmpegSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddFFmpegSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddStreamProxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddStreamProxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddStreamProxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddStreamPusherProxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddStreamPusherProxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddStreamPusherProxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BroadcastMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BroadcastMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BroadcastMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CloseRtpServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CloseRtpServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CloseRtpServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CloseStreamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CloseStreamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CloseStreamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CloseStreamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CloseStreamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CloseStreamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConnectRtpServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ConnectRtpServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConnectRtpServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DelFFmpegSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DelFFmpegSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DelFFmpegSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DelStreamProxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DelStreamProxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DelStreamProxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DelStreamPusherProxyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DelStreamPusherProxyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DelStreamPusherProxyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRecordDirectoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRecordDirectoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRecordDirectoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAllSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMediaInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMediaInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMediaInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMediaListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMediaListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMediaListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMediaPlayerListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMediaPlayerListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMediaPlayerListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMp4RecordFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMp4RecordFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMp4RecordFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProxyInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetProxyInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProxyInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProxyPusherInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetProxyPusherInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProxyPusherInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRtpInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRtpInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRtpInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServerConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSnapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatisticResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStatisticResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatisticResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetThreadsLoadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetThreadsLoadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetThreadsLoadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkThreadsLoadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWorkThreadsLoadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkThreadsLoadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IsMediaOnlineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IsMediaOnlineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IsMediaOnlineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IsRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IsRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IsRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KickSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r KickSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KickSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KickSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r KickSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KickSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRtpServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListRtpServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRtpServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoadMP4FileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LoadMP4FileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoadMP4FileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OpenRtpServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OpenRtpServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OpenRtpServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PauseRtpCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PauseRtpCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PauseRtpCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RestartServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RestartServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestartServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResumeRtpCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResumeRtpCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResumeRtpCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeekRecordStampResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SeekRecordStampResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeekRecordStampResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetRecordSpeedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SetRecordSpeedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetRecordSpeedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetServerConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SetServerConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetServerConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartRecordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r StartRecordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartRecordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartSendRtpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r StartSendRtpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartSendRtpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartSendRtpPassiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r StartSendRtpPassiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartSendRtpPassiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopRecordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r StopRecordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopRecordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopSendRtpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r StopSendRtpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopSendRtpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRtpServerSSRCResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateRtpServerSSRCResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRtpServerSSRCResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r VersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AddFFmpegSourceWithResponse request returning *AddFFmpegSourceResponse
func (c *ClientWithResponses) AddFFmpegSourceWithResponse(ctx context.Context, params *AddFFmpegSourceParams, reqEditors ...RequestEditorFn) (*AddFFmpegSourceResponse, error) {
	rsp, err := c.AddFFmpegSource(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddFFmpegSourceResponse(rsp)
}

// AddStreamProxyWithResponse request returning *AddStreamProxyResponse
func (c *ClientWithResponses) AddStreamProxyWithResponse(ctx context.Context, params *AddStreamProxyParams, reqEditors ...RequestEditorFn) (*AddStreamProxyResponse, error) {
	rsp, err := c.AddStreamProxy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddStreamProxyResponse(rsp)
}

// AddStreamPusherProxyWithResponse request returning *AddStreamPusherProxyResponse
func (c *ClientWithResponses) AddStreamPusherProxyWithResponse(ctx context.Context, params *AddStreamPusherProxyParams, reqEditors ...RequestEditorFn) (*AddStreamPusherProxyResponse, error) {
	rsp, err := c.AddStreamPusherProxy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddStreamPusherProxyResponse(rsp)
}

// BroadcastMessageWithResponse request returning *BroadcastMessageResponse
func (c *ClientWithResponses) BroadcastMessageWithResponse(ctx context.Context, params *BroadcastMessageParams, reqEditors ...RequestEditorFn) (*BroadcastMessageResponse, error) {
	rsp, err := c.BroadcastMessage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBroadcastMessageResponse(rsp)
}

// CloseRtpServerWithResponse request returning *CloseRtpServerResponse
func (c *ClientWithResponses) CloseRtpServerWithResponse(ctx context.Context, params *CloseRtpServerParams, reqEditors ...RequestEditorFn) (*CloseRtpServerResponse, error) {
	rsp, err := c.CloseRtpServer(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloseRtpServerResponse(rsp)
}

// CloseStreamWithResponse request returning *CloseStreamResponse
func (c *ClientWithResponses) CloseStreamWithResponse(ctx context.Context, params *CloseStreamParams, reqEditors ...RequestEditorFn) (*CloseStreamResponse, error) {
	rsp, err := c.CloseStream(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloseStreamResponse(rsp)
}

// CloseStreamsWithResponse request returning *CloseStreamsResponse
func (c *ClientWithResponses) CloseStreamsWithResponse(ctx context.Context, params *CloseStreamsParams, reqEditors ...RequestEditorFn) (*CloseStreamsResponse, error) {
	rsp, err := c.CloseStreams(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloseStreamsResponse(rsp)
}

// ConnectRtpServerWithResponse request returning *ConnectRtpServerResponse
func (c *ClientWithResponses) ConnectRtpServerWithResponse(ctx context.Context, params *ConnectRtpServerParams, reqEditors ...RequestEditorFn) (*ConnectRtpServerResponse, error) {
	rsp, err := c.ConnectRtpServer(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConnectRtpServerResponse(rsp)
}

// DelFFmpegSourceWithResponse request returning *DelFFmpegSourceResponse
func (c *ClientWithResponses) DelFFmpegSourceWithResponse(ctx context.Context, params *DelFFmpegSourceParams, reqEditors ...RequestEditorFn) (*DelFFmpegSourceResponse, error) {
	rsp, err := c.DelFFmpegSource(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelFFmpegSourceResponse(rsp)
}

// DelStreamProxyWithResponse request returning *DelStreamProxyResponse
func (c *ClientWithResponses) DelStreamProxyWithResponse(ctx context.Context, params *DelStreamProxyParams, reqEditors ...RequestEditorFn) (*DelStreamProxyResponse, error) {
	rsp, err := c.DelStreamProxy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelStreamProxyResponse(rsp)
}

// DelStreamPusherProxyWithResponse request returning *DelStreamPusherProxyResponse
func (c *ClientWithResponses) DelStreamPusherProxyWithResponse(ctx context.Context, params *DelStreamPusherProxyParams, reqEditors ...RequestEditorFn) (*DelStreamPusherProxyResponse, error) {
	rsp, err := c.DelStreamPusherProxy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelStreamPusherProxyResponse(rsp)
}

// DeleteRecordDirectoryWithResponse request returning *DeleteRecordDirectoryResponse
func (c *ClientWithResponses) DeleteRecordDirectoryWithResponse(ctx context.Context, params *DeleteRecordDirectoryParams, reqEditors ...RequestEditorFn) (*DeleteRecordDirectoryResponse, error) {
	rsp, err := c.DeleteRecordDirectory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRecordDirectoryResponse(rsp)
}

// GetAllSessionWithResponse request returning *GetAllSessionResponse
func (c *ClientWithResponses) GetAllSessionWithResponse(ctx context.Context, params *GetAllSessionParams, reqEditors ...RequestEditorFn) (*GetAllSessionResponse, error) {
	rsp, err := c.GetAllSession(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllSessionResponse(rsp)
}

// GetApiListWithResponse request returning *GetApiListResponse
func (c *ClientWithResponses) GetApiListWithResponse(ctx context.Context, params *GetApiListParams, reqEditors ...RequestEditorFn) (*GetApiListResponse, error) {
	rsp, err := c.GetApiList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiListResponse(rsp)
}

// GetMediaInfoWithResponse request returning *GetMediaInfoResponse
func (c *ClientWithResponses) GetMediaInfoWithResponse(ctx context.Context, params *GetMediaInfoParams, reqEditors ...RequestEditorFn) (*GetMediaInfoResponse, error) {
	rsp, err := c.GetMediaInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMediaInfoResponse(rsp)
}

// GetMediaListWithResponse request returning *GetMediaListResponse
func (c *ClientWithResponses) GetMediaListWithResponse(ctx context.Context, params *GetMediaListParams, reqEditors ...RequestEditorFn) (*GetMediaListResponse, error) {
	rsp, err := c.GetMediaList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMediaListResponse(rsp)
}

// GetMediaPlayerListWithResponse request returning *GetMediaPlayerListResponse
func (c *ClientWithResponses) GetMediaPlayerListWithResponse(ctx context.Context, params *GetMediaPlayerListParams, reqEditors ...RequestEditorFn) (*GetMediaPlayerListResponse, error) {
	rsp, err := c.GetMediaPlayerList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMediaPlayerListResponse(rsp)
}

// GetMp4RecordFileWithResponse request returning *GetMp4RecordFileResponse
func (c *ClientWithResponses) GetMp4RecordFileWithResponse(ctx context.Context, params *GetMp4RecordFileParams, reqEditors ...RequestEditorFn) (*GetMp4RecordFileResponse, error) {
	rsp, err := c.GetMp4RecordFile(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMp4RecordFileResponse(rsp)
}

// GetProxyInfoWithResponse request returning *GetProxyInfoResponse
func (c *ClientWithResponses) GetProxyInfoWithResponse(ctx context.Context, params *GetProxyInfoParams, reqEditors ...RequestEditorFn) (*GetProxyInfoResponse, error) {
	rsp, err := c.GetProxyInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProxyInfoResponse(rsp)
}

// GetProxyPusherInfoWithResponse request returning *GetProxyPusherInfoResponse
func (c *ClientWithResponses) GetProxyPusherInfoWithResponse(ctx context.Context, params *GetProxyPusherInfoParams, reqEditors ...RequestEditorFn) (*GetProxyPusherInfoResponse, error) {
	rsp, err := c.GetProxyPusherInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProxyPusherInfoResponse(rsp)
}

// GetRtpInfoWithResponse request returning *GetRtpInfoResponse
func (c *ClientWithResponses) GetRtpInfoWithResponse(ctx context.Context, params *GetRtpInfoParams, reqEditors ...RequestEditorFn) (*GetRtpInfoResponse, error) {
	rsp, err := c.GetRtpInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRtpInfoResponse(rsp)
}

// GetServerConfigWithResponse request returning *GetServerConfigResponse
func (c *ClientWithResponses) GetServerConfigWithResponse(ctx context.Context, params *GetServerConfigParams, reqEditors ...RequestEditorFn) (*GetServerConfigResponse, error) {
	rsp, err := c.GetServerConfig(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerConfigResponse(rsp)
}

// GetSnapWithResponse request returning *GetSnapResponse
func (c *ClientWithResponses) GetSnapWithResponse(ctx context.Context, params *GetSnapParams, reqEditors ...RequestEditorFn) (*GetSnapResponse, error) {
	rsp, err := c.GetSnap(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnapResponse(rsp)
}

// GetStatisticWithResponse request returning *GetStatisticResponse
func (c *ClientWithResponses) GetStatisticWithResponse(ctx context.Context, params *GetStatisticParams, reqEditors ...RequestEditorFn) (*GetStatisticResponse, error) {
	rsp, err := c.GetStatistic(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatisticResponse(rsp)
}

// GetThreadsLoadWithResponse request returning *GetThreadsLoadResponse
func (c *ClientWithResponses) GetThreadsLoadWithResponse(ctx context.Context, params *GetThreadsLoadParams, reqEditors ...RequestEditorFn) (*GetThreadsLoadResponse, error) {
	rsp, err := c.GetThreadsLoad(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetThreadsLoadResponse(rsp)
}

// GetWorkThreadsLoadWithResponse request returning *GetWorkThreadsLoadResponse
func (c *ClientWithResponses) GetWorkThreadsLoadWithResponse(ctx context.Context, params *GetWorkThreadsLoadParams, reqEditors ...RequestEditorFn) (*GetWorkThreadsLoadResponse, error) {
	rsp, err := c.GetWorkThreadsLoad(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkThreadsLoadResponse(rsp)
}

// IsMediaOnlineWithResponse request returning *IsMediaOnlineResponse
func (c *ClientWithResponses) IsMediaOnlineWithResponse(ctx context.Context, params *IsMediaOnlineParams, reqEditors ...RequestEditorFn) (*IsMediaOnlineResponse, error) {
	rsp, err := c.IsMediaOnline(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIsMediaOnlineResponse(rsp)
}

// IsRecordingWithResponse request returning *IsRecordingResponse
func (c *ClientWithResponses) IsRecordingWithResponse(ctx context.Context, params *IsRecordingParams, reqEditors ...RequestEditorFn) (*IsRecordingResponse, error) {
	rsp, err := c.IsRecording(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIsRecordingResponse(rsp)
}

// KickSessionWithResponse request returning *KickSessionResponse
func (c *ClientWithResponses) KickSessionWithResponse(ctx context.Context, params *KickSessionParams, reqEditors ...RequestEditorFn) (*KickSessionResponse, error) {
	rsp, err := c.KickSession(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKickSessionResponse(rsp)
}

// KickSessionsWithResponse request returning *KickSessionsResponse
func (c *ClientWithResponses) KickSessionsWithResponse(ctx context.Context, params *KickSessionsParams, reqEditors ...RequestEditorFn) (*KickSessionsResponse, error) {
	rsp, err := c.KickSessions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKickSessionsResponse(rsp)
}

// ListRtpServerWithResponse request returning *ListRtpServerResponse
func (c *ClientWithResponses) ListRtpServerWithResponse(ctx context.Context, params *ListRtpServerParams, reqEditors ...RequestEditorFn) (*ListRtpServerResponse, error) {
	rsp, err := c.ListRtpServer(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRtpServerResponse(rsp)
}

// LoadMP4FileWithResponse request returning *LoadMP4FileResponse
func (c *ClientWithResponses) LoadMP4FileWithResponse(ctx context.Context, params *LoadMP4FileParams, reqEditors ...RequestEditorFn) (*LoadMP4FileResponse, error) {
	rsp, err := c.LoadMP4File(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoadMP4FileResponse(rsp)
}

// OpenRtpServerWithResponse request returning *OpenRtpServerResponse
func (c *ClientWithResponses) OpenRtpServerWithResponse(ctx context.Context, params *OpenRtpServerParams, reqEditors ...RequestEditorFn) (*OpenRtpServerResponse, error) {
	rsp, err := c.OpenRtpServer(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOpenRtpServerResponse(rsp)
}

// PauseRtpCheckWithResponse request returning *PauseRtpCheckResponse
func (c *ClientWithResponses) PauseRtpCheckWithResponse(ctx context.Context, params *PauseRtpCheckParams, reqEditors ...RequestEditorFn) (*PauseRtpCheckResponse, error) {
	rsp, err := c.PauseRtpCheck(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePauseRtpCheckResponse(rsp)
}

// RestartServerWithResponse request returning *RestartServerResponse
func (c *ClientWithResponses) RestartServerWithResponse(ctx context.Context, params *RestartServerParams, reqEditors ...RequestEditorFn) (*RestartServerResponse, error) {
	rsp, err := c.RestartServer(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestartServerResponse(rsp)
}

// ResumeRtpCheckWithResponse request returning *ResumeRtpCheckResponse
func (c *ClientWithResponses) ResumeRtpCheckWithResponse(ctx context.Context, params *ResumeRtpCheckParams, reqEditors ...RequestEditorFn) (*ResumeRtpCheckResponse, error) {
	rsp, err := c.ResumeRtpCheck(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResumeRtpCheckResponse(rsp)
}

// SeekRecordStampWithResponse request returning *SeekRecordStampResponse
func (c *ClientWithResponses) SeekRecordStampWithResponse(ctx context.Context, params *SeekRecordStampParams, reqEditors ...RequestEditorFn) (*SeekRecordStampResponse, error) {
	rsp, err := c.SeekRecordStamp(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeekRecordStampResponse(rsp)
}

// SetRecordSpeedWithResponse request returning *SetRecordSpeedResponse
func (c *ClientWithResponses) SetRecordSpeedWithResponse(ctx context.Context, params *SetRecordSpeedParams, reqEditors ...RequestEditorFn) (*SetRecordSpeedResponse, error) {
	rsp, err := c.SetRecordSpeed(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetRecordSpeedResponse(rsp)
}

// SetServerConfigWithResponse request returning *SetServerConfigResponse
func (c *ClientWithResponses) SetServerConfigWithResponse(ctx context.Context, params *SetServerConfigParams, reqEditors ...RequestEditorFn) (*SetServerConfigResponse, error) {
	rsp, err := c.SetServerConfig(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetServerConfigResponse(rsp)
}

// StartRecordWithResponse request returning *StartRecordResponse
func (c *ClientWithResponses) StartRecordWithResponse(ctx context.Context, params *StartRecordParams, reqEditors ...RequestEditorFn) (*StartRecordResponse, error) {
	rsp, err := c.StartRecord(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartRecordResponse(rsp)
}

// StartSendRtpWithResponse request returning *StartSendRtpResponse
func (c *ClientWithResponses) StartSendRtpWithResponse(ctx context.Context, params *StartSendRtpParams, reqEditors ...RequestEditorFn) (*StartSendRtpResponse, error) {
	rsp, err := c.StartSendRtp(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartSendRtpResponse(rsp)
}

// StartSendRtpPassiveWithResponse request returning *StartSendRtpPassiveResponse
func (c *ClientWithResponses) StartSendRtpPassiveWithResponse(ctx context.Context, params *StartSendRtpPassiveParams, reqEditors ...RequestEditorFn) (*StartSendRtpPassiveResponse, error) {
	rsp, err := c.StartSendRtpPassive(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartSendRtpPassiveResponse(rsp)
}

// StopRecordWithResponse request returning *StopRecordResponse
func (c *ClientWithResponses) StopRecordWithResponse(ctx context.Context, params *StopRecordParams, reqEditors ...RequestEditorFn) (*StopRecordResponse, error) {
	rsp, err := c.StopRecord(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopRecordResponse(rsp)
}

// StopSendRtpWithResponse request returning *StopSendRtpResponse
func (c *ClientWithResponses) StopSendRtpWithResponse(ctx context.Context, params *StopSendRtpParams, reqEditors ...RequestEditorFn) (*StopSendRtpResponse, error) {
	rsp, err := c.StopSendRtp(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopSendRtpResponse(rsp)
}

// UpdateRtpServerSSRCWithResponse request returning *UpdateRtpServerSSRCResponse
func (c *ClientWithResponses) UpdateRtpServerSSRCWithResponse(ctx context.Context, params *UpdateRtpServerSSRCParams, reqEditors ...RequestEditorFn) (*UpdateRtpServerSSRCResponse, error) {
	rsp, err := c.UpdateRtpServerSSRC(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRtpServerSSRCResponse(rsp)
}

// VersionWithResponse request returning *VersionResponse
func (c *ClientWithResponses) VersionWithResponse(ctx context.Context, params *VersionParams, reqEditors ...RequestEditorFn) (*VersionResponse, error) {
	rsp, err := c.Version(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVersionResponse(rsp)
}

// ParseAddFFmpegSourceResponse parses an HTTP response from a AddFFmpegSourceWithResponse call
func ParseAddFFmpegSourceResponse(rsp *http.Response) (*AddFFmpegSourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddFFmpegSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAddStreamProxyResponse parses an HTTP response from a AddStreamProxyWithResponse call
func ParseAddStreamProxyResponse(rsp *http.Response) (*AddStreamProxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddStreamProxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAddStreamPusherProxyResponse parses an HTTP response from a AddStreamPusherProxyWithResponse call
func ParseAddStreamPusherProxyResponse(rsp *http.Response) (*AddStreamPusherProxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddStreamPusherProxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBroadcastMessageResponse parses an HTTP response from a BroadcastMessageWithResponse call
func ParseBroadcastMessageResponse(rsp *http.Response) (*BroadcastMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BroadcastMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCloseRtpServerResponse parses an HTTP response from a CloseRtpServerWithResponse call
func ParseCloseRtpServerResponse(rsp *http.Response) (*CloseRtpServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CloseRtpServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCloseStreamResponse parses an HTTP response from a CloseStreamWithResponse call
func ParseCloseStreamResponse(rsp *http.Response) (*CloseStreamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CloseStreamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCloseStreamsResponse parses an HTTP response from a CloseStreamsWithResponse call
func ParseCloseStreamsResponse(rsp *http.Response) (*CloseStreamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CloseStreamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseConnectRtpServerResponse parses an HTTP response from a ConnectRtpServerWithResponse call
func ParseConnectRtpServerResponse(rsp *http.Response) (*ConnectRtpServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConnectRtpServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDelFFmpegSourceResponse parses an HTTP response from a DelFFmpegSourceWithResponse call
func ParseDelFFmpegSourceResponse(rsp *http.Response) (*DelFFmpegSourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DelFFmpegSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDelStreamProxyResponse parses an HTTP response from a DelStreamProxyWithResponse call
func ParseDelStreamProxyResponse(rsp *http.Response) (*DelStreamProxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DelStreamProxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDelStreamPusherProxyResponse parses an HTTP response from a DelStreamPusherProxyWithResponse call
func ParseDelStreamPusherProxyResponse(rsp *http.Response) (*DelStreamPusherProxyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DelStreamPusherProxyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRecordDirectoryResponse parses an HTTP response from a DeleteRecordDirectoryWithResponse call
func ParseDeleteRecordDirectoryResponse(rsp *http.Response) (*DeleteRecordDirectoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRecordDirectoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAllSessionResponse parses an HTTP response from a GetAllSessionWithResponse call
func ParseGetAllSessionResponse(rsp *http.Response) (*GetAllSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiListResponse parses an HTTP response from a GetApiListWithResponse call
func ParseGetApiListResponse(rsp *http.Response) (*GetApiListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMediaInfoResponse parses an HTTP response from a GetMediaInfoWithResponse call
func ParseGetMediaInfoResponse(rsp *http.Response) (*GetMediaInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMediaInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMediaListResponse parses an HTTP response from a GetMediaListWithResponse call
func ParseGetMediaListResponse(rsp *http.Response) (*GetMediaListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMediaListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMediaPlayerListResponse parses an HTTP response from a GetMediaPlayerListWithResponse call
func ParseGetMediaPlayerListResponse(rsp *http.Response) (*GetMediaPlayerListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMediaPlayerListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMp4RecordFileResponse parses an HTTP response from a GetMp4RecordFileWithResponse call
func ParseGetMp4RecordFileResponse(rsp *http.Response) (*GetMp4RecordFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMp4RecordFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProxyInfoResponse parses an HTTP response from a GetProxyInfoWithResponse call
func ParseGetProxyInfoResponse(rsp *http.Response) (*GetProxyInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProxyInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProxyPusherInfoResponse parses an HTTP response from a GetProxyPusherInfoWithResponse call
func ParseGetProxyPusherInfoResponse(rsp *http.Response) (*GetProxyPusherInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProxyPusherInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRtpInfoResponse parses an HTTP response from a GetRtpInfoWithResponse call
func ParseGetRtpInfoResponse(rsp *http.Response) (*GetRtpInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRtpInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServerConfigResponse parses an HTTP response from a GetServerConfigWithResponse call
func ParseGetServerConfigResponse(rsp *http.Response) (*GetServerConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSnapResponse parses an HTTP response from a GetSnapWithResponse call
func ParseGetSnapResponse(rsp *http.Response) (*GetSnapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSnapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStatisticResponse parses an HTTP response from a GetStatisticWithResponse call
func ParseGetStatisticResponse(rsp *http.Response) (*GetStatisticResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatisticResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetThreadsLoadResponse parses an HTTP response from a GetThreadsLoadWithResponse call
func ParseGetThreadsLoadResponse(rsp *http.Response) (*GetThreadsLoadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetThreadsLoadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWorkThreadsLoadResponse parses an HTTP response from a GetWorkThreadsLoadWithResponse call
func ParseGetWorkThreadsLoadResponse(rsp *http.Response) (*GetWorkThreadsLoadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkThreadsLoadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseIsMediaOnlineResponse parses an HTTP response from a IsMediaOnlineWithResponse call
func ParseIsMediaOnlineResponse(rsp *http.Response) (*IsMediaOnlineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IsMediaOnlineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseIsRecordingResponse parses an HTTP response from a IsRecordingWithResponse call
func ParseIsRecordingResponse(rsp *http.Response) (*IsRecordingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IsRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseKickSessionResponse parses an HTTP response from a KickSessionWithResponse call
func ParseKickSessionResponse(rsp *http.Response) (*KickSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KickSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseKickSessionsResponse parses an HTTP response from a KickSessionsWithResponse call
func ParseKickSessionsResponse(rsp *http.Response) (*KickSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KickSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListRtpServerResponse parses an HTTP response from a ListRtpServerWithResponse call
func ParseListRtpServerResponse(rsp *http.Response) (*ListRtpServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRtpServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLoadMP4FileResponse parses an HTTP response from a LoadMP4FileWithResponse call
func ParseLoadMP4FileResponse(rsp *http.Response) (*LoadMP4FileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoadMP4FileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOpenRtpServerResponse parses an HTTP response from a OpenRtpServerWithResponse call
func ParseOpenRtpServerResponse(rsp *http.Response) (*OpenRtpServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OpenRtpServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePauseRtpCheckResponse parses an HTTP response from a PauseRtpCheckWithResponse call
func ParsePauseRtpCheckResponse(rsp *http.Response) (*PauseRtpCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PauseRtpCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRestartServerResponse parses an HTTP response from a RestartServerWithResponse call
func ParseRestartServerResponse(rsp *http.Response) (*RestartServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RestartServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResumeRtpCheckResponse parses an HTTP response from a ResumeRtpCheckWithResponse call
func ParseResumeRtpCheckResponse(rsp *http.Response) (*ResumeRtpCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResumeRtpCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSeekRecordStampResponse parses an HTTP response from a SeekRecordStampWithResponse call
func ParseSeekRecordStampResponse(rsp *http.Response) (*SeekRecordStampResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeekRecordStampResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSetRecordSpeedResponse parses an HTTP response from a SetRecordSpeedWithResponse call
func ParseSetRecordSpeedResponse(rsp *http.Response) (*SetRecordSpeedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetRecordSpeedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSetServerConfigResponse parses an HTTP response from a SetServerConfigWithResponse call
func ParseSetServerConfigResponse(rsp *http.Response) (*SetServerConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetServerConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseStartRecordResponse parses an HTTP response from a StartRecordWithResponse call
func ParseStartRecordResponse(rsp *http.Response) (*StartRecordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartRecordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseStartSendRtpResponse parses an HTTP response from a StartSendRtpWithResponse call
func ParseStartSendRtpResponse(rsp *http.Response) (*StartSendRtpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartSendRtpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseStartSendRtpPassiveResponse parses an HTTP response from a StartSendRtpPassiveWithResponse call
func ParseStartSendRtpPassiveResponse(rsp *http.Response) (*StartSendRtpPassiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartSendRtpPassiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseStopRecordResponse parses an HTTP response from a StopRecordWithResponse call
func ParseStopRecordResponse(rsp *http.Response) (*StopRecordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopRecordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseStopSendRtpResponse parses an HTTP response from a StopSendRtpWithResponse call
func ParseStopSendRtpResponse(rsp *http.Response) (*StopSendRtpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopSendRtpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateRtpServerSSRCResponse parses an HTTP response from a UpdateRtpServerSSRCWithResponse call
func ParseUpdateRtpServerSSRCResponse(rsp *http.Response) (*UpdateRtpServerSSRCResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRtpServerSSRCResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseVersionResponse parses an HTTP response from a VersionWithResponse call
func ParseVersionResponse(rsp *http.Response) (*VersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
