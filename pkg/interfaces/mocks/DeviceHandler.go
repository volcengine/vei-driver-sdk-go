// Code generated by mockery v2.40.0. DO NOT EDIT.

package mocks

import (
	contracts "github.com/volcengine/vei-driver-sdk-go/pkg/contracts"

	mock "github.com/stretchr/testify/mock"
)

// DeviceHandler is an autogenerated mock type for the DeviceHandler type
type DeviceHandler struct {
	mock.Mock
}

// AddDevice provides a mock function with given fields: device
func (_m *DeviceHandler) AddDevice(device *contracts.Device) error {
	ret := _m.Called(device)

	if len(ret) == 0 {
		panic("no return value specified for AddDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*contracts.Device) error); ok {
		r0 = rf(device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveDevice provides a mock function with given fields: device
func (_m *DeviceHandler) RemoveDevice(device *contracts.Device) error {
	ret := _m.Called(device)

	if len(ret) == 0 {
		panic("no return value specified for RemoveDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*contracts.Device) error); ok {
		r0 = rf(device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDevice provides a mock function with given fields: device
func (_m *DeviceHandler) UpdateDevice(device *contracts.Device) error {
	ret := _m.Called(device)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*contracts.Device) error); ok {
		r0 = rf(device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDeviceHandler creates a new instance of DeviceHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeviceHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeviceHandler {
	mock := &DeviceHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
