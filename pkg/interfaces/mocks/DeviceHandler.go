// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "github.com/edgexfoundry/go-mod-core-contracts/v2/models"
	mock "github.com/stretchr/testify/mock"
)

// DeviceHandler is an autogenerated mock type for the DeviceHandler type
type DeviceHandler struct {
	mock.Mock
}

// AddDevice provides a mock function with given fields: deviceName, protocols
func (_m *DeviceHandler) AddDevice(deviceName string, protocols map[string]models.ProtocolProperties) error {
	ret := _m.Called(deviceName, protocols)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]models.ProtocolProperties) error); ok {
		r0 = rf(deviceName, protocols)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveDevice provides a mock function with given fields: deviceName, protocols
func (_m *DeviceHandler) RemoveDevice(deviceName string, protocols map[string]models.ProtocolProperties) error {
	ret := _m.Called(deviceName, protocols)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]models.ProtocolProperties) error); ok {
		r0 = rf(deviceName, protocols)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDevice provides a mock function with given fields: deviceName, protocols
func (_m *DeviceHandler) UpdateDevice(deviceName string, protocols map[string]models.ProtocolProperties) error {
	ret := _m.Called(deviceName, protocols)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]models.ProtocolProperties) error); ok {
		r0 = rf(deviceName, protocols)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDeviceHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewDeviceHandler creates a new instance of DeviceHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDeviceHandler(t mockConstructorTestingTNewDeviceHandler) *DeviceHandler {
	mock := &DeviceHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
