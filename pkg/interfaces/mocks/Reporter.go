// Code generated by mockery v2.40.0. DO NOT EDIT.

package mocks

import (
	contracts "github.com/volcengine/vei-driver-sdk-go/pkg/contracts"

	mock "github.com/stretchr/testify/mock"
)

// Reporter is an autogenerated mock type for the Reporter type
type Reporter struct {
	mock.Mock
}

// ReportEvent provides a mock function with given fields: event
func (_m *Reporter) ReportEvent(event *contracts.AsyncValues) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for ReportEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*contracts.AsyncValues) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewReporter creates a new instance of Reporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReporter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Reporter {
	mock := &Reporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
