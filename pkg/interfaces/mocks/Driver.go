// Code generated by mockery v2.40.0. DO NOT EDIT.

package mocks

import (
	contracts "github.com/volcengine/vei-driver-sdk-go/pkg/contracts"

	logger "github.com/volcengine/vei-driver-sdk-go/pkg/logger"

	mock "github.com/stretchr/testify/mock"
)

// Driver is an autogenerated mock type for the Driver type
type Driver struct {
	mock.Mock
}

// CallService provides a mock function with given fields: device, reqs
func (_m *Driver) CallService(device *contracts.Device, reqs []contracts.CallRequest) error {
	ret := _m.Called(device, reqs)

	if len(ret) == 0 {
		panic("no return value specified for CallService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*contracts.Device, []contracts.CallRequest) error); ok {
		r0 = rf(device, reqs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initialize provides a mock function with given fields: _a0, asyncCh
func (_m *Driver) Initialize(_a0 logger.Logger, asyncCh chan<- *contracts.AsyncValues) error {
	ret := _m.Called(_a0, asyncCh)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(logger.Logger, chan<- *contracts.AsyncValues) error); ok {
		r0 = rf(_a0, asyncCh)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadProperty provides a mock function with given fields: device, reqs
func (_m *Driver) ReadProperty(device *contracts.Device, reqs []contracts.ReadRequest) error {
	ret := _m.Called(device, reqs)

	if len(ret) == 0 {
		panic("no return value specified for ReadProperty")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*contracts.Device, []contracts.ReadRequest) error); ok {
		r0 = rf(device, reqs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields: force
func (_m *Driver) Stop(force bool) error {
	ret := _m.Called(force)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteProperty provides a mock function with given fields: device, reqs
func (_m *Driver) WriteProperty(device *contracts.Device, reqs []contracts.WriteRequest) error {
	ret := _m.Called(device, reqs)

	if len(ret) == 0 {
		panic("no return value specified for WriteProperty")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*contracts.Device, []contracts.WriteRequest) error); ok {
		r0 = rf(device, reqs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDriver creates a new instance of Driver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDriver(t interface {
	mock.TestingT
	Cleanup(func())
}) *Driver {
	mock := &Driver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
