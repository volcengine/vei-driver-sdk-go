// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/edgexfoundry/go-mod-core-contracts/v2/dtos/common"

	errors "github.com/edgexfoundry/go-mod-core-contracts/v2/errors"

	mock "github.com/stretchr/testify/mock"

	requests "github.com/volcengine/vei-driver-sdk-go/extension/requests"

	responses "github.com/volcengine/vei-driver-sdk-go/extension/responses"
)

// DeviceStatusClient is an autogenerated mock type for the DeviceStatusClient type
type DeviceStatusClient struct {
	mock.Mock
}

// AllDeviceStatus provides a mock function with given fields: ctx, offset, limit
func (_m *DeviceStatusClient) AllDeviceStatus(ctx context.Context, offset int, limit int) (responses.MultiDeviceStatusResponse, errors.EdgeX) {
	ret := _m.Called(ctx, offset, limit)

	var r0 responses.MultiDeviceStatusResponse
	if rf, ok := ret.Get(0).(func(context.Context, int, int) responses.MultiDeviceStatusResponse); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		r0 = ret.Get(0).(responses.MultiDeviceStatusResponse)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(context.Context, int, int) errors.EdgeX); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// DeviceStatusByName provides a mock function with given fields: ctx, name
func (_m *DeviceStatusClient) DeviceStatusByName(ctx context.Context, name string) (responses.DeviceStatusResponse, errors.EdgeX) {
	ret := _m.Called(ctx, name)

	var r0 responses.DeviceStatusResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) responses.DeviceStatusResponse); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(responses.DeviceStatusResponse)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(context.Context, string) errors.EdgeX); ok {
		r1 = rf(ctx, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, req
func (_m *DeviceStatusClient) Update(ctx context.Context, req requests.UpdateDeviceStatusRequest) (common.BaseResponse, errors.EdgeX) {
	ret := _m.Called(ctx, req)

	var r0 common.BaseResponse
	if rf, ok := ret.Get(0).(func(context.Context, requests.UpdateDeviceStatusRequest) common.BaseResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(common.BaseResponse)
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(context.Context, requests.UpdateDeviceStatusRequest) errors.EdgeX); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewDeviceStatusClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewDeviceStatusClient creates a new instance of DeviceStatusClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDeviceStatusClient(t mockConstructorTestingTNewDeviceStatusClient) *DeviceStatusClient {
	mock := &DeviceStatusClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
